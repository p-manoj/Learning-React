npm => not node package manager
it manages the packages in the project
// npm init -y => it will create a package.json file with default values
but it does not stand for node package manager
// it is a recursive acronym for node package manager
npm is a biggest repository for javascript packages, utilities, frameworks etc. 
npm init - y => it will create a package.json file with default values, without - y it will ask for the values to be filled in the package.json file.
    Bundler : - it is a tool that takes all the files and assets of your project and combines them into a single file or a few files.It helps to optimize the performance of your application by reducing the number of requests made to the server.It also helps to manage dependencies and ensures that all the required files are included in the final output.
// Webpack is a module bundler for modern JavaScript applications. It takes modules with dependencies and generates static assets representing those modules. It is used to bundle JavaScript files for usage in a browser.
it packages all the files and put it to production mode and minifies the code to make it smaller in size and faster to load.It also helps to manage dependencies and ensures that all the required files are included in the final output.
npm install - D : -D is a shorthand for --save - dev, which means that the package will be installed as a development dependency.This means that the package is only needed during development and not in production.It will be added to the devDependencies section of the package.json file.
^ in package version means that it will upgrade to the latest minor version upgrade but not the major version upgrade.
// ~ in package version means that it will upgrade to the latest patch version upgrade but not the minor or major version upgrade.
^ is default in package.json file
Node modules: - contains all the packages with transitive dependencies

    ****** npm is to install the packages
npx is to execute the packages with parameters required. ******


React Component: - is a function that returns a "JSX element or react element". It is a reusable piece of code that can be used to create UI elements in a React application. It can accept props as arguments and can manage its own state using hooks. 
Name of the component should start with a capital letter.
to render a react component, it must be wrapped in </> tag.

component inside another component is called component composition.

To put a react elemnt inside a react component, it will be placed as {}. because it is a normal
javascript variable.

Config Driven UI ->  Webapp driven by Data. Based on Data the UI will appear. Controling the UI based on data.
for ex. for a particular brand, different different offers are there for different cities, then for each cities the UI 
will look different, But in that case the core UI code will be the same, it is the data which makes the UI look different.
So, the DATA is deriving the UI.

another example may be an weather app, where based on weather condition we might want to show background colors, 
for rainy - blue, sunny-yellow/red. winter-silver/white


to iterate over a list using map , we must use the key property to
uniquely identify the row. so that, React can render that changed component only, not all the component.
Never Use index as the keys.


Two types of exports, Named and Default
In named exports we simply use export before every variable/function. and while 
importing it must be imported within {}.
export const URL = "some.url"
import {URL} from "./exporting/module/path"
A module can have multiple named exports.

In default export -> A module can only have one default export.
to export default, first declare and define the variable. and then 
export it.

const DEFAULT_URL = "default.url";
export default DEFAULT_URL;

to Import, it does not require {}.
import DEFAULT_URL from "./default/exporting/module/path"
and in default export while importing we can use any name irrespective of 
name defined in module.

React Hooks -> React Hooks are normal javascript function which returns a 
state variable for a component and a function to update the value of the variable.
mainly two types of hooks are there

useState - to define the state of a component, so that whenever the state changes, component re-renders Automatically.
A state is a local variable to the component and whenever a state gets updated, React triggers a Reconciliation cycle
i.e. Re-Renders that Component.

useEffect - to use the external things inside react like fetching data from external api, or doing some work other then React after the 
Components loads.
Hooks are named import of react.
useEffect accept two arguments:
    1. Callback function -> to  be called after Component renders.
    2. Dependency Array -> An array of variable which when changes, useEffect needs to be called. (Optional)
        there are three possible cases for dependency array
            a. No array passed (second parameter is empty) -> useEffect(callback func) will be called every time component renders.
            b. Empty array Passed ([]) -> useEffect will be called for once.
            c. Array with some dependency --> useEffect will be called every time that dependeny changed.
But only when the component re(Renders);

MicroService Architecture:-
    - Single Responsibility Principle
    - Seperation of Concerns

CORS policy
Browser restrict the access of cross URL not the destination one.

To convert json object into string --> JSON.stringify(obj);

CORSPROXY.IO --> corsproxy.io is the site which bypass the cors policy 
in execution. We have to append the target URL to https://corsproxy.io/?url=https://example.com


To work with multiple pages we need Routers. React-Router-dom library provides 
routing functionality to react. I can be part of our project by npm i react-router-dom.

To inject router in our app, we need to get two thing from react-router-dom(rrd)
    1. createBrowserRouter -> a function which takes an array of objects which contains path and corrosponding 
        element (component which will render for that path).
        For ex. const routes = createBrowserRouter([
            {
                path:"/",
                element:<Home/>
            },
            {
                path:"/about",
                element:<About/>
            }
        ]).
    2. after getting the router variable for all paths, we need a component which can render components based on the
        Path. to do that we need special component by library i.e. RouterProvider.
        root.render(<RouterProvider router={routes}>);
        //earlier we are only rendering single component and that was our own, to render different components
        based on path, this special component will do the magic.
There is another Hook associated with React-Router-Dom i.e. useRouteError.
When there is no path associated to given url or a wrong path is given, then it will throw errors on the UI, like 404 not found,
the same can be displayed via custom component and it will be third element in the route object. i.e. 
        const routes = createBrowserRouter([
            {
                path:"/",
                element:<Home/>,
                errorElement:<Error/>
            }
        ]);
        The useRouteError hook will be used in <Error /> component to get more details about the error.
        using those details <Error/> component can be made more meaningful.